Elméleti kérdések:
------------------
Mit jelent az, hogy két ütemezés konfliktus-ekvivalens?
Mit jelent az, hogy egy ütemezés konfliktus-sorbarendezhetõ?
Mi az a megelõzési gráf és hogyan épül fel?
Mit állíthatunk konzisztens, kétfázisú tranzakciók jogszerû ütemezésérõl?
Igaz-e, hogy konzisztens tranzakciók jogszerû ütemezése konfliktus-sorbarendezhetõ? (ellenpélda)
Igaz-e, hogy konzisztens, kétfázisú tranzakciók esetén nem alakulhat ki holtpont? (ellenpélda)
Mi az a várakozási gráf és hogyan épül fel?
--------------------------------------------------------------------------------

Adott az alábbi három tranzakció. Adjuk meg az X adatbáziselem lehetséges
értékeit a trazakciók lefutása után, feltéve, hogy a tranzakciók ütemezése
soros, és X kezdeti értéke 100.
T1: READ(X,t); t:=t+100; WRITE(X,t);
T2: READ(X,t); t:=t*2; WRITE(X,t);
T3: READ(X,t); t:=t+10; WRITE(X,t);

T1,T2,T3 -> 410, T1,T3,T2 -> 420
T2,T1,T3 -> 310, T2,T3,T1 -> 310
T3,T1,T2 -> 420, T3,T2,T1 -> 320
--------------------------------------------------------------------------------

9.1.2 Feladat (ehhez hasonló)
Hányféle különbözõ ütemezése van a fenti 3 tranzakciónak?  -> 9! / (3!*3!*3!)
Hányféle soros ütemezése van a fenti 3 tranzakciónak?      -> 3! = 6 féle
--------------------------------------------------------------------------------

9.2.1 Feladat
Adott az alábbi két tranzakció. Igazoljuk, hogy a (T1,T2) és (T2,T1) soros 
ütemezések ekvivalensek, vagyis az adatbázison való hatásuk azonos.
T1: READ(A,t); t:=t+2; WRITE(A,t); READ(B,t); t:=t*3; WRITE(B,t);
T2: READ(B,s); s:=s*2; WRITE(B,s); READ(A,s); s:=s+3; WRITE(A,s); (-> A és B értéke ugyanaz lesz)

-> A tranzakciók lefutása után A-ból -> A+5, B-bõl -> 6*B lesz mindkét esetben.

Adjunk példát a fenti 12 mûvelet sorba rendezhetõ és nem sorba rendezhetõ ütemezésére is.
(megoldás: lásd ab2_feladat10_help.pdf)
(-> R1(A), t:=t+2, W1(A), R2(B), s:=s*2, W2(B), R1(B), t:=t*3, W1(B), R2(A), s:=s+3, W2(A) ) sorba rendezhetõ
(-> R1(A), t:=t+2, W1(A), R2(B), s:=s*2, R1(B), W2(B), t:=t*3, W1(B), R2(A), s:=s+3, W2(A) )
A tranzakciók lokális értékadási mûveleteinek sorrendje (pl. t:=t+2) nem igazán
számít, valójában az írási és olvasási mûveletek sorrendje a fontos. Ezért 
a továbbiakban csak ezeket fogjuk felírni.         
--------------------------------------------------------------------------------

9.2.2 Feladat
Az elõzõ feladat tranzakcióiban csak az írási és olvasási mûveleteket jelölve a 
következõ két tranzakciót kapjuk:
T1: R1(A); W1(A); R1(B); W1(B);
T2: R2(B); W2(B); R2(A); W2(A);
A fenti 8 mûvelet ütemezései közül hány darab konfliktusekvivalens a 
(T1,T2) soros sorrenddel? 
-> csupán egyetlen egy, maga a soros ütemezés
   R1(A); W1(A); R1(B); W1(B); R2(B); W2(B); R2(A); W2(A);
                        ------------ konfliktus

A fenti 8 mûvelet ütemezései közül hány darab konfliktus sorbarendezhetõ?
-> 2, a (T1,T2) és (T2,T1) soros ütemezések
--------------------------------------------------------------------------------

9.2.3 Feladat
Adjuk meg a konfliktus-sorbarendezhetõ ütemezések számát az alábbi két tranzakcióra.
T1: r1(A); w1(A); r1(B); w1(B);
T2: r2(A); w2(A); r2(B); w2(B);

r1(A); w1(A); r1(B); w1(B);r2(A); w2(A); r2(B); w2(B);
              --------------------------
(T1,T2) soros sorrenddel konfliktus ekvivalens ütemezések száma:
A középsõ 4 mûvelet lehet teszõlegesen ütemezni, ezek száma: 4! / (2! * 2!) = 6

Ugyanez igaz (T2,T1) soros sorrendre is, így összesen 12 a végeredmény.
--------------------------------------------------------------------------------

9.2.4 Feladat
Adjuk meg az alábbi ütemezések (S1,S2,S3,S4) megelõzési gráfját.
S1: R1(A); R2(A); R3(B); W1(A); R2(C); R2(B); W2(B); W1(C);
S2: R1(A); R2(A); W1(B); W2(B); R1(B); R2(B); W2(C); W1(D);
S3: R1(A); R2(A); R1(B); R2(B); R3(A); R4(B); W1(A); W2(B);
S4: R1(A); R2(A); R1(C); R2(B); R3(A); R4(B); W1(A); W2(B);   
-> a gráf csúcsai a tranzakciók, az irányított éleket pedig a konfliktusos elempárok alapján rajzoljuk be
--------------------------------------------------------------------------------

9.3.2 Feladat
T1: l1(A); R1(A); W1(A); l1(B); R1(B); W1(B); u1(A); u1(B);
T2: l2(B); R2(B); W2(B); l2(A); R2(A); W2(A); u2(B); u2(A);
Kétfázisú-e a fenti két tranzakció?
-> igen
Adjunk példát egy olyan tranzakcióra, amely nem kétfázisú.
-> legyen benne a lock mûvelet egy unlock után, ez már elég
Hány jogszerû ütemezést tudunk készíteni a fenti tranzakciók mûveleteibõl? 
 -> 2-t, a két sorosat
 Indoklás: a tranzakciók konzisztensek, kétfázisúak, tehát jogszerû ütemezésük 
 konfliktus-sorbarendezhetõ lesz. A fenti két tranzakció esetén azonban csak a két
 soros ütemezés konfliktus-sorbarendezhetõ, lásd a 9.2.2 feladatot.
--------------------------------------------------------------------------------

Adjuk meg az alábbi ütemezésekre, hogy jogszerûek-e, valamint a bennük szereplõ tranzakciókról,
hogy melyek konzisztensek illetve kétfázisúak.
l1(A); W1(A); l1(B); u1(A); l2(A); W2(A); u2(A); R1(B); l2(C); W2(C); u2(C); u1(B)
jogszerû, T1 kétfázisú

l1(A); W1(A); u1(A); l2(A); W2(A); l1(B); u2(A); R1(B); l2(C); W2(C); u2(C); u1(B)
jogszerû, egyik sem kétfázisú

l1(A); W1(A); l2(A); W2(A); l1(B); u1(a); u2(A); R1(B); l2(C); W2(C); u2(C); u1(B)
nem jogszerû, T1 kétfázisú
--------------------------------------------------------------------------------

9.3.4 Feladat
Tekintsük a következõ, két mûveletet: r1(A), w1(B), valamint a szükséges 
l1(A), u1(A), l1(B), u1(B) zárkezelõ mûveleteket. 
Adjuk meg, hogy a mûveleteknek hányféle lehetséges sorrendje lehet úgy, hogy az
elõálló tranzakció
a) konzisztens legyen 
   (-> 2 db hármas részsorozat <l,r,u> <l,w,u> tetszõleges ütemezései lesznek jók: 6!/(3!*3!) = 20)
b) konzisztens de nem kétfázisú legyen 
   (csak 2 nem kétfázisú konzisztens eset van, ha a részsorozatok [<l,r,u> <l,w,u>] egymás után állnak -> 2)
c) konzisztens és kétfázisú legyen 
   (-> 20-2=18)
d) kétfázisú legyen
   (A lock és unlock 2*2=4 lehetséges sorrendben lehet, elõször a l, majd az u mûveletek.
    Ezután az r az 5 hely bármelyikén lehet, majd a w a most már 6 hely bármelyikén: 4*5*6=120)
e) se nem konzisztens, se nem kétfázisú legyen
   (az összes lehetõség 6!=720, ebbõl kell levonni 120-at (d) és még 2-t (b) -> 598)
--------------------------------------------------------------------------------

9.4.7 Feladat
Az alábbi ütemezésbõl egy mûvelet hiányzik a kérdõjelek helyén:
R1(A); R2(B); ???; W1(C); W2(A);
Adjunk meg egy olyan olvasási mûveletet ide, amely esetén az ütemezés nem konfliktus-sorbarendezhetõ.
Adjunk meg egy olyan írási mûveletet ide, amely esetén az ütemezés nem konfliktus-sorbarendezhetõ.

-> olyan mûveletet kell keresni, amely esetén a megelõzési gráf kört fog tartalmazni
--------------------------------------------------------------------------------

Rajzoljuk fel a következõ ütemezéshez tartozó várakozási gráfot a 7., és 9. lépés után.
(tegyük fel, hogy egy felszabaduló zárat az a várakozó fog megkapni, aki a legrégebben vár)
l1(A); l2(B); l3(C); l1(D); l2(A); l3(D); l4(B); u1(A); l2(C); ...
-> a gráfot folyamatosan módosítjuk, amikor valakinek várnia kell, berajzolunk egy élet a várakozó 
   csomóponttól a blokkoló felé; amikor egy zárat elengednek, töröljük a megfelelõ élet,
   és esetleg újakat rajzolunk be az új várakozásoknak megfelelõen
--------------------------------------------------------------------------------

Rajzoljuk fel a következõ ütemezéshez tartozó várakozási gráfot a 8., 10. és 12. lépés után (S/X modell).
(tegyük fel, hogy egy felszabaduló zárat az a várakozó fog megkapni, aki a legrégebben vár)
sl1(A); xl2(B); sl3(C); sl3(D); sl1(B); xl4(C); sl2(D); xl3(A); u2(B); sl2(C); u1(A); u3(C) ...
-> lásd elõzõ feladat
