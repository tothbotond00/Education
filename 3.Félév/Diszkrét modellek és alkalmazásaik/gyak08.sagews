︠ffcf4650-dcf9-432a-9ff2-4849d8a84b7fs︠
#5 Írjon SSS_secret_pieces(required_num_of_people, num_of_people, secret) szignatúrával függvényt, amely a secret titokból num_of_people db titokrészletet készít, ahol a minimum szükséges részletek száma required_num_of_people. A függvény véletlenszerűen válasszon ki egy alkalmas polinomot és prímszámot. A prímszám legyen kellően távol a titoktól (a függvény adja eredményül azt is, melyik prímszám lett kiválasztva).

def SSS_secret_pieces_from_primenum_and_coeffs(num_of_people, secret, primenum, coeff) :
    list_of_coeff = coeff + [secret]
    list_of_coeff.reverse()
    poly = GF(primenum)['x'](list_of_coeff)
    result = []
    for i in [1..num_of_people]:
        result.append((i,poly(i)))
    return result

def SSS_compute_secret(primenum, secret_pieces):
    return GF(primenum)['x'].lagrange_polynomial(secret_pieces)(0)

def SSS_secret_pieces(required_num_of_people, num_of_people, secret) :
    #ide sokféle megoldás elképzelhető
    primenum = next_prime(10 * max(num_of_people,secret) * randint(1, secret))
    coeff = [randint(1,primenum-1) for x in [1..required_num_of_people-1]]
    return (primenum,SSS_secret_pieces_from_primenum_and_coeffs(num_of_people, secret, primenum, coeff))

SSS_secret_pieces(3, 4, 5)

#6 A 34fg__#Gfb34226fdsWWQl36lII234i<!%fGZjsdJFEBD77467effO+36{}__IOQsFF&363&ZzOO053 jelszóhoz készítsen titokrészleteket, amelyet 10 ember között osztunk szét úgy, hogy legalább 7 ember szükséges legyen az eredeti jelszó előállításához. Adott 7 titokrészletből állítsa elő az eredeti jelszót.
#a sztriget értelmezzük 256-os számrendszerbeli számként

password =list( "34fg__#Gfb34226fdsWWQl36lII234i<!%fGZjsdJFEBD77467effO+36{}__IOQsFF&363&ZzOO053")
password.reverse()

result = 0
i = 0
for ch in password :
    result += ord(ch) * 256^i
    i += 1

#SSS_secret_pieces(7, 10, result)
#SSS_compute_secret

secret = 3564733067735719071646687286191003377609878724686405481337882898389016373456046506323076878927861827176786281900611822489011829592155079319045973686683531183534466558164788076421842157450547

secret_list = []

while secret > 0 :
    secret_list.append(chr(secret % 256))
    secret //= 256

secret_list.reverse()
secret_string = "".join(secret_list)
secret_string

︡da5d42b9-962f-4abd-a862-a15aedd54156︡{"stdout":"(53, [(1, 23), (2, 17), (3, 40), (4, 39)])\n"}︡{"stdout":"'34fg__#Gfb34226fdsWWQl36lII234i<!%fGZjsdJFEBD77467effO+36{}__IOQsFF&363&ZzOO053'\n"}︡{"done":true}









