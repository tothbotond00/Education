--takeWhile :: (a -> Bool) -> [a] -> [a] 
--until :: (a -> Bool) -> (a -> a) -> a -> a
--any :: (a -> Bool) -> [a] -> Bool
--all :: (a -> Bool) -> [a] -> Bool
--(.) :: (b -> c) -> (a -> b) -> (a -> c)
--composition :: [(a -> a)] -> a -> a

--f1 (f2 (f3 ... (fn e)...) 


{-
reverse' :: [a] -> [a]
reverse' []     = []
reverse' (x:xs) = reverse' xs ++ [x]
-}

-- (++) :: [a] -> [a] -> [a]
-- []     ++ l = l
-- (x:xs) ++ l = x : (xs ++ l)

{- [1,2] ++ [3,4]
1 : ([2] ++ [3,4])
     2 : ([] ++ [3,4])
         [3,4]
     [2,3,4]
[1,2,3,4]

[1,2] ++ ([3,4] ++ [5,6])
...
[1,2,3,4] ++ [5,6]
1: ([2,3,4] ++ [5,6])
    2 : ([3,4] ++ [5,6])


-}


-- r [1,2,3] -> r [2,3] ++ [1] -> (r [3] : 2) : 1 -> r [] : 3 : 2 : 1

-- []
-- 3:2:1:[]

reverse' :: [a] -> [a]
reverse' l = rev l [] where
  rev (x:xs) acc = rev xs (x:acc)
  rev []     acc = acc

reverse'' :: [a] -> [a]
reverse'' l = foldl (\ acc x -> x:acc) [] l

{-
filter p [] = []
filter p (x:xs)
  | p x       = x : filter p xs
  | otherwise = filter p xs
-}

filter' :: (a -> Bool) -> [a] -> [a]
filter' p l = foldr pred [] l where
  pred x res
    | p x       = x : res
    | otherwise = res

composition :: [(a -> a)] -> a -> a
composition fl e = foldr ($) e fl
{-
composition [] e     = e
composition (f:fs) e = f $ (composition fs e)-}

-- ($) :: (a -> b) -> a -> b
-- f $ e = f e

until' :: (a -> Bool) -> (a -> a) -> a -> a
until' p f e
  | p e       = e
  | otherwise = until' p f (f e)
