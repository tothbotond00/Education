import Prelude hiding ((&&))

(&&) :: Bool -> Bool -> Bool
True  && True  = True
_     && _     = False
--True  && False = False
--False && True  = False
--False && False = False

-- (:), []

-- null
empty :: [a] -> Bool
-- empty l = length l == 0 !!!
empty [] = True
empty _  = False

isSingleton :: [a] -> Bool
isSingleton []     = False
isSingleton (x:[]) = True
isSingleton (x:xs) = False

-- length (take 2 l) == 1

isDoubleton :: [a] -> Bool
isDoubleton (_:_:[]) = True -- [x,y] -> [x,_] -> [_,_]
isDoubleton _        = False

hasLength :: Int -> [a] -> Bool
--hasLength n l = length (take (n+1) l) == n
hasLength n l = hL n l where
  hL 0 []     = True
  hL 0 (x:xs) = False
  hL m []     = False
  hL m (x:xs) = hL (m-1) xs

-- 3 [1,2,3] -> 2 [2,3] -> 1 [3] -> 0 []
-- 3 [1,2,3,4] -> 2 [2,3,4] -> 1 [3,4] -> 0 [4]
-- 3 [1,2] -> 2 [2] -> 1 []

fact :: Integer -> Integer -- n! -> n*(n-1)!
fact 0 = 1
fact n
   | n > 0 = n*fact (n-1)

abs' x
  | x >= 0    = x
  | otherwise = -x

{-
fact 5 -> 5 * fact 4
              4 * fact 3
                  3 * fact 2
                      2 * fact 1
                          1  * fact 0
                               1
                          1
                      2
                  6
              24
          120
-}