table :: Int
table = 12

queens :: Int -> [[Int]]
queens 0 = [[]]
queens n = [ q:b | b <- queens (n - 1), q <- [0..table-1], safe'' q b ]

-- queens 1 -> b <- [[]] 
-- [[0], [1], [2] ... [7]]

-- queens 2 -> b <- [[0], [1], [2] ... [7]]
-- [[2,0], [3,0], [4,0].. [7,0], [3,1], [4,1].. ]

safe q b = and [not (checks q b i) | i <- [0..(length b) - 1]]

checks q b i = q == b !! i || abs (q - b !! i) == i + 1
--             0 == 2      || 2                == 1
-- checks q b   i
-- checks 0 [2] 0

-- checks 1 [0,2] 0
-- 1 == 0 || 1 == 1
-- checks 1 [0,2] 1

safe' q b = and [not (checks' q e i) | (i, e) <- zip [0..] b]

checks' q e i = q == e || abs (q - e) == i + 1

safe'' q b = sH q b 0 where
  sH q []     i = True
  sH q (e:es) i = q /= e && abs (q-e) /= i+1 && sH q es (i+1)

main = print (length qs, qs) where qs = queens table

lessT3 :: Integral a => [a] -> [a]
lessT3 l = filter (<3) l

--lessT3 [212,23,12] -> filter (<3) [212,23,12]
{-
lessT3 []     = []
lessT3 (x:xs)
  | x < 3     = x : lessT3 xs
  | otherwise = lessT3 xs
-}

gt3 :: Integral a => [a] -> [a]
gt3 []     = []
gt3 (x:xs)
  | x > 3     = x : gt3 xs
  | otherwise = gt3 xs

filter' :: (a -> Bool) -> [a] -> [a]
filter' p [] = []
filter' p (x:xs)
  | p x       = x : filter' p xs
  | otherwise = filter' p xs

{-
filter'' :: (a -> Bool) -> [a] -> [a]
filter'' p l = [ e | e <- l, p e]
-}

-- lambda kif., névtelen függv.
-- \ x -> x + 1
-- \ x -> even x
-- (+1)    \ x -> x + 1
-- \ x -> even x && x > 3

--filter (\x -> mod 3 x) [1..10] -- hibás