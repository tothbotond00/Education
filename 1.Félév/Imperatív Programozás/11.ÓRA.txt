Imperatív programozás 10.
Típusabsztrakció
Komponensek
Nagy programok esetében nem reális, hogy az elejétől a végéig minden részét mi írjuk meg. Ez részben igen sok munkaóra lenne (ne csak a fejlesztési időt, hanem a tesztelést, és a későbbi karbantartást is vegyük figyelembe), részben pedig felesleges is: nagy valószínűséggel számos komponensre másoknak is szüksége volt már, és ezek a komponensek léteznek.

A többszöri újrafelhasználásra szánt szoftverkomponenseket könyvtárak-nak (library) nevezzük. A legtöbb programozási nyelv rendelkezik egy olyan szabványos könyvtárral (standard library), ami a legalapvetőbb funkcionalitást biztosítja: input/output, stringműveletek, alapvető matematikai műveletek, stb. Ezen felül egyes nyelvek számos további szolgáltatást biztosíthatnak: a C++ STL szabványos adatszerkezeteket és rajtuk végrehajtható általános algoritmusokat szolgáltat, a Java nagyszámú könyvtára között pedig grafikus interfészt, adatbázis- és hálózatkezelést és rengeteg más komponenst találunk. A C nyelv szabványos könyvtára a kisebbek közé tartozik.

A könyvtárak megjelenési formája gyakran a nyelv által támogatott programozási paradigmától függ: Java-ban, C#-ban gyakran osztálykönyvtárakként valósulnak meg, C++-ban sokszor template osztályok és függvények. A procedurális C-ben, többnyire függvénykönyvtárakat találunk. Azt a kódot, amelyik felhasználja a könyvtárat, felhasználói, vagy kliens kódnak nevezzük.

Interfész és implementáció
Egy (akár hardver- akár szoftver-) komponens pontosan meghatározott módon kell kommunikáljon az őt használó többi komponenssel. Fontos, hogy ezen a felületen kívül ne lehessen elérni a komponens belsejét. Ezt a felületet a komponens interfészének (interface) nevezzük. Az interfész egyfajta szerződés a komponens (létrehozója) és az azt használók (szoftverek) között: a komponens ezen keresztül garantál egy funkcionalitást, amire a felhasználók (szoftverek) építhetnek. Másrészről, mivel a kliensek csak ezen a felületen keresztül érhetik el a szolgáltatásokat, azok megvalósítása, azaz az implementáció (implementation) teljes egészében a komponens megvalósítójának kezében van, azon szükség esetén (bizonyos kereteken belül) módosíthat is.

Az interfész sokféle összetevőből állhat: konstansok, adattípusok, függvények, kivételek akár még változók is. Az alábbi példában egy dátum komponens látható.

struct date
{
  int year;
  int month;
  int day;   
};

void f(void)
{
  /* mezőnkénti inicializálás  */
  struct date exam = { 2019, 12, 17}; 
  ++exam.day;            /* egy nappal elhalasztva */
  exam.day += 40;        /* valószínűleg hiba      */
}
Ha van valamilyen komponens szintű állandó, akkor azt nyugodtan definiálhatjuk csak olvasható (constant, immutable) változónak. Amennyiben aznban írható/olvasható változóink vagy adattagjaink vannak, akkor nehéz megakadályozni, hogy a kliens hibás adatot (január 42-e, vagy február 30-a) állítson be. Ezért gyakoribb, hogy az interfészben változók helyett alprogramok-at (függvény, metódus, property) használunk.

struct date
{
  int year;
  int month;
  int day;   
};

void f(void)
{
  /* inicializálás, ellenőrzi az egyes mezők értékeit */
  struct date exam = dateCreate(2019, 12, 17);
  dateNext(&exam);          /* egy nappal elhalasztva */
  dateAdd(&exam,40);        /* lekezeli a hónap végét */
}
Egy eljárás, mint az dateAdd() ellenőrizni tudja a paramétereit, illetve a dátum szemantikájának megfelelően hajtja végre a növelést, pl növeli a hónap vagy év értékét is. A fent C példában azért adtuk át az interfész függvényeknek a dátum objektum címét, mert csak így tudjuk módosítani magát az objektumot.

A klienssel közölni kell, hogy milyen módon tudja használni a könyvtárat. Ez alpján a fordítóprogram képes (valamilyen szinten) ellenőrizni ezt a használatot és jelenzi, ha valamol eltértünk a megfelelő módtól. Ez java-ban az import, C#-ban a use utasításal történik. C-ben és C++-ban a felhasználni kívánt könyvtár headerének include-ja segítségével tesszük meg.

Megjegyzések
Példa az implementáció/interfész szétválasztására: A UNIX operációs rendszert pl. csak a megfelelő rendszerhívásokon keresztül lehet elérni. Ez egy hosszútávon stabil felület, akár 20-30 évvel ezelőtt megírt rendszerprogramok is lefordulnak és futnak. Másrészt a rendszerhívások mögött a javítások, fejlesztések folyamatosak lehetnek.

A C és C++ nyelvekben egy komoly korlát lehet a bináris kmpatibilitás megőrzése, amire akkor van szükség, ha dinamikus szerkesztésű programok esetén megváltoztatjuk a könyvtárat. Ennek az oka a C és C++ nyelvek érték szemantikája, azaz a kliensnek pl. tudnia kell, hány bájt méretű egy változó vagy függvényparaméter. ha pl. a fenti programban megváltozik a struct date struktúra szerkezete, akkor nem csak a dátum komponenst, hanem a dátumot felhasználó kliens programokat is újra kell fordítani.

Egységbezárás
A fenti dátum példához megadhatunk egy teljes értékű interfészt, ami alapján a kliens programok a teljes funkcionalitást fel tudják használni. De hogyan tudjuk megakadályozni, hogy a kliens az interfészt megkerülve közvetlenül elérje az implementációt?

Azokat a programnyelvi mehanizmusokat, amelyek az implementáció elérését megakadályozzák és rákényszeríti a klienst az interfész felhasználására kényszeríti, egységbezárás-nak (enkapszuláció, encapsulation, information hiding) nevezzük.

A különböző programozási paradigmák eltérő eszközöket adnak és az egyes nyelvek is eltérő mélységben támogatják ezeket. Az objektum-orientált nyelvekben pl. az adattagok és metódusok elérési jogai (access modifiers)
(pl. public, protected, private) teszik lehetővé az információ elrejtését. A class private vagy protected neveit nem érhetjük el az osztályon kívülről, az fordítási időben szintaktikus hibát okoz.

// Ez C++ kód
class date
{
public:
  void  set(int y, int m, int d);
  void  next();
  void  add(int n);
  int   getYear() const;
  int   getMonth() const;
  int   getday() const;

  date &operator++();
  date  operator++(int);
  date &operator+=(int);
private:
  int year;
  int month;
  int day;   
};

std::ostream& operator<<(std::ostream& os, const date& d);

void f()
{
  date exam(2018,12,15); /* konstruktor: inicializálás   */
  exam.set(2018,12,17);  /* dátum beállítása dec. 17-re  */
  exam.next();           /* egy nappal elhalasztva       */
  exam.add(40);          /* lekezeli a hónap végét       */
  std::cout << exam.getDay(); /* ok, 17-e kiírása        */
  exam.day += 40;        /* syntax error: day is private */
  std::cout << exam << '\n';  /* a teljes dátum kiírása  */
}
Enkapszuláció C-ben
Az alábbiakban elkészítjük a fenti dátum típus C implementációját. A modul interfésza a date.h headerfájl lesz, ezt kell majd a klienseknek include-olniuk, ha használni akarják a könyvtárat. Az implementáció nagy része a date.c állományba kerül, ezt hozzá kell szerkeszteni (statikusan vagy dinamikusan) a dátumot felhasználó kliens programokhoz.

/* date.h */
#ifndef DATE_H
#define DATE_H

typedef struct DATE
{
  int year;
  int month;
  int day;
}
date_t;

date_t dateCreate( int y, int m, int d);

void   dateSet( date_t *dp, int y, int m, int d);
int    dateGetYear(date_t *dp); 
int    dateGetMonth(date_t *dp); 
int    dateGetDay(date_t *dp); 

void   dateNext( date_t *dp);
void   dateAdd( date_t* dp, int n);

#endif /* DATE_H */
Az implementáció a date.c fájlba kerül. Itt hozzuk létre az interfész függvényeket, de itt definiálhatunk az interfészbe nem tartozó elemeket is: segédfüggvényeket és adatszerkezeteket. Ezeket, hogy a külvilág ne láthassa static függvényként vagy adatként definiáljuk.

/* date.c */

#include <stdio.h>
#include <stdlib.h>

#include "date.h"


/* implementáció: static declarációk */

/* napok száma az adott hónapban, kivéve szökőév */
static const int dOfm[] = {
  31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
                          };

/* y szökőév? */
static int leapYear( int y)
{
  /* TODO implementálni!!! */
  return 0;
}

/* napok tényleges száma az év/hónapban */
static int daysOfMonth( int y, int m)
{
  int maxDay = dOfm[m-1]; /* tömb 0-tól indexelődik */

  if ( 2 == m && leapYear(y) )
    ++maxDay;  /* szökőév */

  return maxDay;  
}

/* helyes dátum-e az (y, m, d) hármas? */
static int checkDate(int y, int m, int d)
{
  return  0 != y  &&
          1 <= m  &&  m <= 12  &&
          1 <= d  &&  d <= daysOfMonth(y, m);  
}

/* hibakezelés, nem a legszofisztikáltabb */
#if __STDC_VERSION__ == 201112L
_Noreturn   /* csak C11-től */
#endif
static void dateError( int y, int m, int d)
{
  fprintf( stderr, "Invalid date: (%d, %d, %d)\n",y,m,d);
  exit(1);
}

/* interfész függvények */

date_t dateCreate( int y, int m, int d)
{
  date_t date;

  if ( ! checkDate( y, m, d) )
  {
    dateError( y, m, d);    	
  }
  date.year  = y;
  date.month = m;
  date.day   = d;
  return date;
}

void dateSet( date_t *dp, int y, int m, int d)
{
  if ( ! checkDate( y, m, d) )
  {
    dateError( y, m, d);    	
  }
  dp->year  = y;
  dp->month = m;
  dp->day   = d;
}

int dateGetYear( date_t *dp)
{
  return dp->year;
}

int dateGetMonth( date_t *dp)
{
  return dp->month;
}

int dateGetDay( date_t *dp)
{
  return dp->day;
}

void dateNext( date_t *dp)
{
  ++dp->day;

  if ( dp->day > daysOfMonth( dp->year, dp->month) )
  {
    dp->day = 1;
    ++dp->month;     

    if ( 13 == dp->month )
    {
      dp->month = 1;
      ++dp->year;
      if ( 0 == dp->year )
      {
        ++dp->year;	  
      }
    }
  }
}

void dateAdd( date_t *dp, int n)
{
  /* TODO check n >= 0 ? */  	
  int i;
  for (	i = 0; i < n; ++i )
  {
    dateNext( dp);	  
  }	  
}
A főprogramban az interfész függvényeket hívjuk, létrehozunk egy dátumot, módosítjuk, illetve kiírjuk az értékeit.

/* main.c */
#include <stdio.h>
#include "date.h"

int main()
{
  date_t exam = dateCreate(2018, 12, 17);
  printf( "Eredeti vizsgadatum = (%d, %d, %d)\n", 
                                  dateGetYear(&exam), 
                                  dateGetMonth(&exam), 
                                  dateGetDay(&exam));

  dateNext( &exam);
  printf( "Vizsgadatum + 1 = (%d, %d, %d)\n", 
                                  dateGetYear(&exam), 
                                  dateGetMonth(&exam),
                                  dateGetDay(&exam));

  dateAdd( &exam, 40);
  printf( "Elhalasztott vizsga = (%d, %d, %d)\n", 
                                  dateGetYear(&exam),
                                  dateGetMonth(&exam),
                                  dateGetDay(&exam));
  return 0;	
}
A forrásfájlokat egymástól függetlenül fordíthatjuk le, majd statikusan vagy dinamikusan össze kell szerkeszteni őket.

$ gcc -c -Wall -Wextra -c date.c
$ gcc -c -Wall -Wextra -c main.c 
$ gcc date.o main.o -o exams
Futtatjuk a programot.

$ ./exams
Eredeti vizsgadatum = (2018, 12, 17)
Vizsgadatum + 1 = (2018, 12, 18)
Elhalasztott vizsga = (2019, 1, 27)
Vector típus implementációja
Az előző példa bemutatta egy egyszerű típus implementációját. Van azonban pár hiányossága, amin lehetne még lehetne javítani.

Bár az adatokat el lehet érni az interfész függvényeken keresztül, de ha valaki mindenáron (helytelenül) azt akarja, az közvetlenül elérhetné a dátum objektumok év, hó, nap mezőit.
Ha új adattagokat raknánk be a dátum típusunkba, pl. időzóna, akkor a struktúra mérete megváltozik, ezért újra kell fordítani az összes klienst (ebben az esetben a main.c-t). Ez a bináris inkompatibilitás nagy szoftverrendszereknél komoly problémát okozna.
A hibakezelés tökéletlen. Jó lenne csak jelezni a hibát és a kliens kódra bízni, hogy mit csinál hiba esetén.
Az alábbi példa egy dinamikusan növekvő vektor típus megvalósítása, hasonló, mint ami a C++ standard könyvtár std::vector típusa. C++-ban valahogy így szeretnénk használni a vector osztályt:

// Ez C++ kód

#include <iostream>
#include "vector.h"

void f()
{
  int i;       
  vector_t vec1;     
  vector_t vec2; 
  vector_t vec3;   

  std::cout << "vec1 size = " << vec1.size << '\n';  // 0

  for(i = 0; i < 100; ++i)
  {
    double d = i;
    vec1.push_back(d*d);    
  }
  std::cout << "vec1 cap. = " << vec1.capacity();  // ?
  std::cout << "vec1 size = " << vec1.size();      // 0
  std::cout << "vec1[42]  = " << vec1[42] << '\n'; // 1764 
  
  vec2 = vec1;                            

  vec2[42] = 99.99;                     
  std::cout << "vec1[42] = " << vec1[42] << '\n';  // 1764 
  std::cout << "vec2[42] = " << vec2[42] << '\n';  // 99.99

  vec2.pop_back();                            
  std::cout << "vec2 cap. = " << vec2.capacity();  // ?
  std::cout << "vec2 size = " << vec2.size();      // 99
  
  vec3 = vec2; 
  std::cout << "vec3 cap. = " << vec3.capacity();  // ?
  std::cout << "vec3 size = " << vec3.size();      // 99
}  // a vec3, vec3 és vec1 destruktora itt meghívódik
A C nyelvben nem tudunk ilyen szép interfészt létrehozni, de bizonyos kompromisszumokkal azért tudunk hasonló funkcionalitást megvalósítani. Az std::vector interfészét kissé leegyszerűsítettük. Ezek után ez lesz a megvalósítandó funkcionalitás:

Létre tudunk hozni egy üres vektort (vectorCreate)
Be tudunk szúrni egy új elemet a vektor végére (vectorPushBack)
Törölhetjük a vektor utolsó elemét (vectorPopBack)
Írhatjuk a vekror i-edik elemét, ha i kisebb, mint a méret (vectorSet)
Olvashatjuk a vekror i-edik elemét, ha i kisebb, mint a méret (vectorGet)
Lekérdezhetjük a vektor elemeinek számát (vectorSize)
Lekérdezetjük az implementációs buffer méretét (vectorCapacity)
Törölhetjük a vektort, annak tartalmával együtt (vectorDestroy)
Átmásolhatjuk a vektor tartalmát egy másik vektorba (vectorCopy)
Átmozgathatjuk a vektor adatait, a régi vektor üres lesz (vectorMove)
A hibaüzeneteket a vectorErrno globális változóból tudjuk kiolvasni.

A felhasználó például így szeretné használni a vector könyvtárat C-ben:

#include <stdio.h>
#include "vector.h"

void f()
{
  int i;                                         
  vector_t vec1 = vectorCreate();              
  vector_t vec2 = vectorCreate(); 
  vector_t vec3 = vectorCreate();   

  printf( "vec1 size = %u\n", vectorSize(vec1)); 

  for(i = 0; i < 100; ++i)
  {
    double d = i;
    vectorPushBack( vec1, d*d);                  
  }
  printf( "vec1 cap. = %u\n", vectorCapacity( vec1));
  printf( "vec1 size = %u\n", vectorSize( vec1));    
  printf( "vec1[42] = %f\n", vectorGet( vec1, 42));   
  
  /* vec2 = vectorCreate();   MEMORY LEAK lenne!! */
  /* vec2 = vec1              shallow copy lenne! */
  vectorCopy( vec2, vec1); 

  vectorSet( vec2, 42, 99.99);                   /* 99.99 */
  printf( "vec1[42] = %f\n",vectorGet(vec1, 42));/* 1764  */
  printf( "vec2[42] = %f\n",vectorGet(vec2, 42));/* 99.99 */

  vectorPopBack( vec2);                            
  printf( "vec2 cap. = %u\n", vectorCapacity( vec2)); 
  printf( "vec2 size = %u\n", vectorSize( vec2));     
  
  vectorMove( vec3, vec1);                         
  printf( "vec3 size = %u\n", vectorSize( vec3));  
  printf( "vec1 size = %u\n", vectorSize( vec1));  

  /* ha nem hívjuk a ..Destroy()-okat, MEMORY LEAK lenne */
  vectorDestroy( vec1);    /* destructor */
  vectorDestroy( vec2);    /* destructor */
  vectorDestroy( vec3);    /* destructor */
}
A fenti program lefutása az alábbi eredményt kell szolgáltassa:

$ gcc -ansi -pedantic -Wall -W vecmain.c vector.c
$ ./a.out
vec1 size = 0
vec1 cap. = 128
vec1 size = 100
vec1[42] = 1764.000000
vec1[42] = 1764.000000
vec2[42] = 99.990000
vec2 cap. = 100
vec2 size = 99
vec3 size = 100
vec1 size = 0
A vector.h fogja tartalmazni az interfészt. Lényegében egy header fálj, ami az interfész függvények és a típusra specifikus konstansok deklarációja.

#ifndef VECTOR_H
#define VECTOR_H

#define VEC_EOK      0
#define VEC_ENOMEM   1
#define VEC_EINDEX   2
#define VEC_EEMPTY   3


struct VECTOR_S;
typedef struct VECTOR_S *vector_t; 

extern int vectorErrno;

extern vector_t vectorCreate();
extern void     vectorDestroy( vector_t);

extern unsigned vectorSize( vector_t v);
extern unsigned vectorCapacity( vector_t v);

extern 
vector_t vectorCopy( vector_t target, vector_t source);
extern 
vector_t vectorMove( vector_t target, vector_t source);

extern 
   void vectorSet( vector_t v, unsigned idx, double d);
extern 
 double vectorGet( vector_t v, unsigned idx);

extern void vectorPushBack( vector_t v, double d);
extern void vectorPopBack( vector_t v);

#endif /* VECTOR_H */
Az implementációt a vector.c forrásfájlban helyezzük el.

#include <stdlib.h>
#include <string.h>
#include "vector.h"

#define INIT_CAPACITY 4

struct VECTOR_S
{
  unsigned  capacity_;
  unsigned  size_;
  double   *ptr_;
};
int vectorErrno;

vector_t vectorCreate()
{
  vector_t v = (vector_t) malloc(sizeof(struct VECTOR_S));
  if ( NULL == v )
  {
    vectorErrno = VEC_ENOMEM;
    return NULL;
  }
  v->capacity_ = 0;
  v->size_     = 0;
  v->ptr_      = NULL;

  vectorErrno = VEC_EOK;
  return v;
}
void vectorDestroy( vector_t v)
{
  free(v->ptr_);
  free(v);

  vectorErrno = VEC_EOK;
  return;
}
unsigned vectorCapacity( vector_t v)
{
  vectorErrno = VEC_EOK;
  return v->capacity_;
}
unsigned vectorSize( vector_t v)
{
  vectorErrno = VEC_EOK;
  return v->size_;
}
void vectorPushBack( vector_t v, double d)
{
  if ( v->size_ == v->capacity_ )
  {
    if ( ! vectorGrowBuffer(v) )
      return;
  }
  v->ptr_[v->size_++] = d;

  vectorErrno = VEC_EOK;
  return; 
}
void vectorPopBack( vector_t v)
{
  if ( v->size_ == 0 )
  {
    vectorErrno = VEC_EEMPTY;
    return; 
  }
  --v->size_;

  vectorErrno = VEC_EOK;
  return; 
}
void vectorSet( vector_t v, unsigned idx, double d)
{
  if ( idx < 0  ||  idx >= v->size_ )
  {
    vectorErrno = VEC_EINDEX;
    return;
  }
  v->ptr_[idx] = d;

  vectorErrno = VEC_EOK;
  return;
}
double vectorGet( vector_t v, unsigned idx)
{
  if ( idx < 0  ||  idx >= v->size_ )
  {
    vectorErrno = VEC_EINDEX;
    return 0.0;
  }
  vectorErrno = VEC_EOK;
  return v->ptr_[idx];
}
vector_t vectorCopy( vector_t target, vector_t source)
{
  if ( target != source )
  {
    free(target->ptr_);
    target->capacity_ = source->size_;  /* csökkenhet */
    target->size_     = source->size_;  

    if ( source->size_ > 0 )
    {
      unsigned i;
      target->ptr_ = (double *) 
               malloc(target->capacity_*sizeof(double));
      if ( NULL == target->ptr_ )
      {
        vectorErrno = VEC_ENOMEM;
        return NULL;
      }
      /* for (i = 0; i < target->size_; ++i)
           target->ptr_[i] = source->ptr_[i]; 
        copy elements, but more effective with memcpy() */
      memcpy( target->ptr_, source->ptr_,
                          target->size_*sizeof(double));
    }
    else
    {
      target->ptr_ = NULL;
    }
  }
  vectorErrno = VEC_EOK;
  return target;
}
vector_t vectorMove( vector_t target, vector_t source)
{
  if ( target != source )
  {
    free(target->ptr_);
    target->capacity_ = source->capacity_;  
    target->size_     = source->size_;  
    target->ptr_      = source->ptr_;       /* move */
 
    source->capacity_ = 0;
    source->size_     = 0;
    source->ptr_      = NULL;
  }
  vectorErrno = VEC_EOK;
  return target;
}
static int vectorGrowBuffer( vector_t v)
{
  unsigned i;
  unsigned newCapacity = v->capacity_ ? 2*v->capacity_ : 
                                        INIT_CAPACITY;
  double *oldPtr = v->ptr_;
  double *newPtr = (double *) 
              realloc(oldptr, newCapacity*sizeof(double));
  if ( NULL == newPtr )
  {
     vectorErrno = VEC_ENOMEM;
     return 0;
  }
  /* realloc did this
  for (i = 0; i < v->size_; ++i)
    newPtr[i] = oldPtr[i]; */

  v->capacity_ = newCapacity;
  v->ptr_ = newPtr;
  free(oldPtr);

  return 1;
}
 
A fenti megoldás a double vektorok egy megfelelő megvalósítása. Mi lesz azonban a többi típussal. Hogyan tudjuk álalánosítani a megoldásunkat?

Példányosítás: Újabb típusok generálása. Így működnek a C++ template-ek, de erre nincsen jó mehanizmus C-ben. Szimulálhatjuk preprocesszor varázslással.

Típustörlés: Minden típust ugyanaz a kódpéldány szolgál ki. Így működik a Java Generic. Ezt közelítjük az alábbi C megoldással.

#include <stdio.h>
#include <string.h>
#include "vector.h"

void copyDouble(void *tgt, void *src)
{
  memcpy(tgt,src,sizeof(double));
}	

int main()
{
  int i;
  vector_t vec1 = vectorCreate(sizeof(double),copyDouble); /* vector_t vec1; */
  vector_t vec2 = vectorCreate(sizeof(double),copyDouble); /* vector_t vec2; */
  vector_t vec3 = vectorCreate(sizeof(double),copyDouble); /* vector_t vec3; */

  printf( "vec1 cap. = %lu\n", vectorCapacity( vec1));   /* vec1.capacity()   */
  printf( "vec1 size = %lu\n", vectorSize(vec1));        /* vec1.size()    */

  for(i = 0; i < 100; ++i)
  {
    double d = i*i;  
    vectorPushBack( vec1, &d);                          /* vec1.push_back(i) */
  }
  printf( "vec1 cap. = %lu\n", vectorCapacity( vec1));  /* vec1.capacity()   */
  printf( "vec1 size = %lu\n", vectorSize( vec1));      /* vec1.size()       */
  printf( "vec1[42] = %f\n",*(double*)vectorAt(vec1,42)); /* vec1[42]        */
  
  vectorCopy( vec2, vec1);                              /* vec2 = vec2       */

  *(double*)vectorAt( vec2, 42) = 99.99;                 /* vec[2] = 99.99   */
  printf( "vec1[42] = %f\n",*(double*)vectorAt(vec1,42));/* vec1[42] 1764.00 */
  printf( "vec2[42] = %f\n",*(double*)vectorAt(vec2,42));/* vec2[42]   99.99 */

  vectorPopBack( vec2);                                 /* vec2.pop_back()   */
  printf( "vec2 cap. = %lu\n", vectorCapacity( vec2));  /* vec2.capacity()   */
  printf( "vec2 size = %lu\n", vectorSize( vec2));      /* vec2.size()       */
  
  vectorMove( vec3, vec1);                              /* vec3 = move(vec1) */
  printf( "vec3 size = %lu\n", vectorSize( vec3));      /* vec3.size()       */
  printf( "vec1 size = %lu\n", vectorSize( vec1));      /* vec1.size()       */

  vectorDestroy( vec1);                                 /* destructor        */
  vectorDestroy( vec2);                                 /* destructor        */
  vectorDestroy( vec3);                                 /* destructor        */
  return 0;
}
A módosított interfész:

#ifndef VECTOR_H
#define VECTOR_H

#include <stddef.h>

#define VEC_EOK      0
#define VEC_ENOMEM   1
#define VEC_EINDEX   2
#define VEC_EEMPTY   3


struct VECTOR_S;

typedef struct VECTOR_S *vector_t; 
typedef void (*elem_copy_t)(void *tgt, void *src);

extern int vectorErrno;

extern vector_t vectorCreate( size_t esize, elem_copy_t cpyfunc);
extern void     vectorDestroy( vector_t);

extern size_t   vectorSize( vector_t v);
extern size_t   vectorCapacity( vector_t v);

extern vector_t vectorCopy( vector_t target, vector_t source);
extern vector_t vectorMove( vector_t target, vector_t source);

extern void    *vectorAt( vector_t v, size_t idx);

extern void     vectorPushBack( vector_t v, void *src);
extern void     vectorPopBack( vector_t v);

#endif /* VECTOR_H */
A megvalósítás:

#include <stdio.h>

#include <stddef.h>
#include <stdlib.h>
#include "vector.h"

#define INIT_CAPACITY 4

struct VECTOR_S
{
  size_t      capacity_;
  size_t      size_;
  char       *ptr_;
  size_t      esize_;
  elem_copy_t cpyfun_;
};

int vectorErrno;

static int vectorGrowBuffer( vector_t v)
{
  size_t i;
  size_t newCapacity = v->capacity_ ? 2*v->capacity_ 
                                    : INIT_CAPACITY;
 
  char *oldPtr = v->ptr_;
  char *newPtr = malloc(newCapacity * v->esize_);

  if ( NULL == newPtr )
  {
     vectorErrno = VEC_ENOMEM;
     return 0;
  }
  for (i = 0; i < v->size_; ++i)
  {
    v->cpyfun_( newPtr+(i*v->esize_), oldPtr+(i*v->esize_));
  }

  v->capacity_ = newCapacity;
  v->ptr_ = newPtr;
  free(oldPtr);

  return 1;
}

vector_t vectorCreate( size_t esize, elem_copy_t cpyfun)
{
  vector_t v = (vector_t) malloc(sizeof(*v));
  if ( NULL == v )
  {
    vectorErrno = VEC_ENOMEM;
    return NULL;
  }
  v->capacity_ = 0;
  v->size_     = 0;
  v->ptr_      = NULL;
  v->esize_    = esize;
  v->cpyfun_   = cpyfun;

  vectorErrno = VEC_EOK;
  return v;
}

void vectorDestroy( vector_t v)
{
  free(v->ptr_);
  free(v);

  vectorErrno = VEC_EOK;
  return;
}

size_t vectorCapacity( vector_t v)
{
  vectorErrno = VEC_EOK;
  return v->capacity_;
}

size_t vectorSize( vector_t v)
{
  vectorErrno = VEC_EOK;
  return v->size_;
}

vector_t vectorCopy( vector_t target, vector_t source)
{
  if ( target != source )
  {
    free(target->ptr_);

    target->capacity_ = source->size_;  /* esetleg csökken */
    target->size_     = source->size_;  
    target->cpyfun_   = source->cpyfun_;

    if ( source->size_ > 0 )
    {
      size_t i;
      size_t esz = source->esize_;
      target->ptr_ = malloc(target->capacity_ * esz);
      if ( NULL == target->ptr_ )
      {
        vectorErrno = VEC_ENOMEM;
        return NULL;
      }
      for (i = 0; i < target->size_; ++i)
        source->cpyfun_( target->ptr_+i*esz, source->ptr_+i*esz);
    }
    else
    {
      target->ptr_ = NULL;
    }
  }
  vectorErrno = VEC_EOK;
  return target;
}

extern vector_t vectorMove( vector_t target, vector_t source)
{
  if ( target != source )
  {
    free(target->ptr_);

    target->capacity_ = source->capacity_;  
    target->size_     = source->size_;  
    target->ptr_      = source->ptr_;       /* move */
 
    source->capacity_ = 0;
    source->size_     = 0;
    source->ptr_      = NULL;
  }
  vectorErrno = VEC_EOK;
  return target;
}

void *vectorAt( vector_t v, size_t idx)
{
  if ( idx >= v->size_ )
  {
    vectorErrno = VEC_EINDEX;
    return NULL;
  }
  vectorErrno = VEC_EOK;
  return v->ptr_ + idx*v->esize_;
}

void vectorPushBack( vector_t v, void *srcptr)
{
  void *tgtptr;

  if ( v->size_ == v->capacity_ )
  {
    if ( ! vectorGrowBuffer(v) )
      return;
  }
  tgtptr = v->ptr_ + v->esize_*v->size_;
  v->cpyfun_( tgtptr, srcptr);
  ++v->size_;
  vectorErrno = VEC_EOK;
  return; 
}

void vectorPopBack( vector_t v)
{
  if ( v->size_ == 0 )
  {
    vectorErrno = VEC_EEMPTY;
    return; 
  }
  --v->size_;

  vectorErrno = VEC_EOK;
  return; 
}
Fordítás, szerkesztés, futtatás:

$ gcc -ansi -pedantic -Wall -W vecmain.c vector.c
$ ./a.out
vec1 cap. = 0
vec1 size = 0
vec1 cap. = 128
vec1 size = 100
vec1[42] = 1764.000000
vec1[42] = 1764.000000
vec2[42] = 99.990000
vec2 cap. = 100
vec2 size = 99
vec3 size = 100
vec1 size = 0
Ellenőrizzük a megoldásunk helyességét a memória-elszivárgás szempontjából:

==492== Memcheck, a memory error detector
==492== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==492== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==492== Command: ./a.out
==492==
vec1 cap. = 0
vec1 size = 0
vec1 cap. = 128
vec1 size = 100
vec1[42] = 1764.000000
vec1[42] = 1764.000000
vec2[42] = 99.990000
vec2 cap. = 100
vec2 size = 99
vec3 size = 100
vec1 size = 0
==492==
==492== HEAP SUMMARY:
==492==     in use at exit: 0 bytes in 0 blocks
==492==   total heap usage: 11 allocs, 11 frees, 3,448 bytes allocated
==492==
==492== All heap blocks were freed -- no leaks are possible
==492==
==492== For counts of detected and suppressed errors, rerun with: -v
==492== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)